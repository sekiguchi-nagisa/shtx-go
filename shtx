#!/usr/bin/env ydsh

# Copyright (C) 2022-2023 Nagisa Sekiguchi
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# +++++ public configuration variables (starts with SHTX_) ++++++

# if true, use current shtx-go binary
var SHTX_DEV_MODE = $false

var SHTX_CRASH_DUMP = $true

# +++++ helper functions +++++

var _SHTX_GO_BIN_PATH = ""

_error() : Nothing {
    echo 2>&1 $@
    throw new Error($@.join(" "))
}

_try_fetch_bin() {
    if $SHTX_DEV_MODE || (checkenv SHTX_DEV_MODE) {
        command -v go &> /dev/null || _error "require go binary"
        if !(test -x $SCRIPT_DIR/shtx-go) {
            # rebuild
            (cd $SCRIPT_DIR && command go build &) .wait()
            test -x $SCRIPT_DIR/shtx-go || _error cannot build shtx-go
        }
        $_SHTX_GO_BIN_PATH = "$SCRIPT_DIR/shtx-go"
    } else {
        _error TODO: download released binary
    }
}

function __save_crash_dump(in : String, out : String, e : Error) : Bool {
    var name = "crash_shtx_$(command date  +"%Y-%m-%dT%H:%M:%S%z").log"
    {
        echo '+++++  error message  +++++'
        $e.show() with 2>&1
        echo $'\n+++++  input script  +++++'
        echo $in
        echo $'\n+++++  output script  +++++'
        echo $out
    } with > $name
    echo 1>&2 "save crash dump:"
    echo 1>&2 -e "\t${$name.realpath() ?? $name}"
    return $true
}


# +++++ for shell variable +++++

let __VAR_ATTR_EXPORT = 0x01

typedef _VarEntry(v: String?, a : Int?) {
    var value = $v ?? ""  # if indicate env, value is env name
    var attr = $a ?? 0
}

function hasAttr(attr : Int) : Bool for _VarEntry {
    return ($this.attr and $attr) == $attr
}

# update value, if entry indicates env, update env value
function assign(value : String) : String for _VarEntry {
    if $this.hasAttr($__VAR_ATTR_EXPORT) {
        setenv ${this.value}=$value
    } else {
        $this.value = $value
    }
    return $value
}

# get value. if entry indicates env, get env value
function get() : String? for _VarEntry {
    if $this.hasAttr($__VAR_ATTR_EXPORT) {
        return (printenv ${this.value} &> /dev/null) ? "$(command printenv ${this.value})" : new String?()
    } else {
        return $this.value
    }
}

typedef _VarMap(_arg0 : String, _args : [String], _parent : _VarMap?) {
    var arg0 = $_arg0
    var args = $_args
    let entries : [String : _VarEntry]
    let parent = $_parent
}

var _vars = new _VarMap("bash", $@)

# get variable entry. if entry is not found, but corresponding env is found, set and return entry
function get(name : String) : _VarEntry? for _VarMap {
    return $this.entries.get($name) ?? {
        if(checkenv "$name") {
            var e = new _VarEntry($name, $__VAR_ATTR_EXPORT)
            $this.entries.put($name, $e)
            return $e
        }
        return $none
    }
}

function set(name : String, entry : _VarEntry) for _VarMap {
    $this.entries.put($name, $entry)
}

function update(name : String, value : String) : String for _VarMap {
    if let entry = $_vars.get($name) {
        $entry.assign($value)
    } else {
        $_vars.set($name, new _VarEntry($value))
    }
    return $value
}

function remove(name : String) : _VarEntry? for _VarMap {
    var e = $this.entries.get($name)
    if $e {
        $this.entries.remove($name)
    }
    return $e
}

function _error(cmd : String, v : String) {
    echo 1>&2 ${$_vars.arg0}: $cmd: $v
}

typedef _SHError : Error

function __shtx_var_get_impl(param : String, op : String, word : String) : String {
    assert !$param.empty()

    case $param {
        '?' => { 
            if $op == ':+' || $op == '+' {
                return $word
            }
            return "$?" 
        }
        '#' => {
            if $op == ':+' || $op == '+' {
                return $word
            }
            return $_vars.args.size() as String
        }
        $/^[0-9]+$/ => {
            var n = $param.toInt(10)!
            assert $n > -1
            if $n == 0 || $n - 1 < $_vars.args.size() { # set 0, 1~
                var v = $n == 0 ? $_vars.arg0 : $_vars.args[$n - 1]
                case $op {
                    ':-' => return $v :- $word
                    ':=' => return $v :- throw new _SHError("${_vars.arg0}: \$${param}: cannot assign in this way")
                    ':?' => return $v :- throw new _SHError("${_vars.arg0}: \$${param}: ${word}", 127)
                    ':+' => return !$v.empty() ? $word : ""
                    '+' => return $word
                    else => return $v :- ""
                }
            } else {    # unset (1~)
                case $op {
                    ':-' | '-' => return $word
                    ':=' | '=' => throw new _SHError("${_vars.arg0}: \$${param}: cannot assign in this way")
                    ':?' | '?' => throw new _SHError("${_vars.arg0}: \$${param}: ${word}", 127)
                    ':+' | '+' => return ""
                    else => return ""
                }
            }
        }
        else => {}
    }

    let v = if let entry = $_vars.get($param) { $entry.get(); } else { $none; }
    case $op {
        ':-' => return ($v ?? "") :- $word
        '-' => return $v ?? $word
        ':=' => return ($v ?? "") :- $_vars.update($param, $word)
        '=' => return $v ?? $_vars.update($param, $word)
        ':?' => return ($v ?? "") :- throw new _SHError("${_vars.arg0}: \$${param}: ${word}", 127)
        '?' => return $v ?? throw new _SHError("${_vars.arg0}: \$${param}: ${word}", 127)
        ':+' => return $v && !$v!.empty() ? $word : ""
        '+' => return $v ? $word : ""
        else => return $v ?? ""
    }
}

# +++++ runtime helper functions (starts with __shtx_) +++++

# for global varibale access
__shtx_var_get() {
    # __shtx_var_get $? $param $op $word
    var old = $1.toInt()!
    var param = $2
    var op = $3
    var word = $4
    $? = $old
    $REPLY = $__shtx_var_get_impl($param, $op, $word)
    return $old
}

__shtx_var_set() {
    var param = $1 :- return 0
    var word = $2
    $_vars.update($param, $word)
    return 0
}

# for bash export command
__shtx_export() {
    for arg in $@ {
        ($arg.empty() || $arg.startsWith("-")) && continue
        let i = $arg.indexOf('=')
        let name = $i != -1 ? $arg.slice(0, $i) : $arg

        if let entry = $_vars.get($name) {
            if !$entry.hasAttr($__VAR_ATTR_EXPORT) {
                var e = new _VarEntry($name, $__VAR_ATTR_EXPORT)
                $e.assign($entry.value)
                $_vars.set($name, $e)
            }
        } else {
            var e = new _VarEntry($name, $__VAR_ATTR_EXPORT)
            $e.assign("")
            $_vars.set($name, $e)
        }

        if $i != -1 {
            $_vars.update($name, $arg.slice($i + 1))
        }
    }
    return 0
}

# for bash unset command
__shtx_unset() {
    for arg in $@ {
        ($arg.empty() || $arg.startsWith("-")) && continue
        var entry = $_vars.remove($arg)
        !$entry && continue
        if $entry!.hasAttr($__VAR_ATTR_EXPORT) {
            unsetenv $arg
        }
    }
    return 0
}

__shtx_shift() {
    var offset = 1
    if !$1.empty() {
        $offset = $1.toInt(10) ?? { 
            $_error("shift", "numeric argument required"); 
            return 1;
        }
    }
    ($offset < 0 || $offset > $_vars.args.size()) && return 1

    for(var i = 0; $i < $offset; $i++) {
        $_vars.args.shift()
    }
    return 0
}

__shtx_[() {
    ($# == 0 || $@.peek() != ']') && { $_error("[", "missing \`]'"); return 2; }
    $@.pop()    # skip last ']'
    test $@
}


# dynamically resolve command name
__shtx_dyna_call() {
    $@.empty() && return 0

    var cmd = $@.shift()
    $cmd = case $cmd {
        '[' => '__shtx_['
        'export' => '__shtx_export'
        'unset' => '__shtx_unset'
        'shift' => '__shtx_shift'
        'eval' => 'fake_eval'
        '.' | 'source' => 'fake_source'
        else => $cmd
    }
    call "$cmd" $@
}

function __shtx_set_argv(argv : [String]) : [String] {
    var old : [String]
    $old.add($_vars.arg0)
    $old.addAll($_vars.args)

    if !$argv.empty() {
        # $_vars.arg0 = $argv[0]  # not update $0
        $_vars.args = $argv.slice(1)
    }
    return $old
}

function __shtx_func(name : String, cmd : Command) : Bool {
    $DYNA_UDCS[$name] = $cmd
    return $true
}

function __shtx_enter_func(arg0 : String, args : [String]) {
    var vv = new _VarMap("bash", $args, $_vars)  # FIXME: set arg0 ?
    $_vars = $vv
}

function __shtx_exit_func() {
    var p = $_vars.parent
    $_vars = $p!
}


# +++++ public api functions (starts with fake_) +++++

# evaluate bash script (emulate bash eval command)
fake_eval() {
    $@.empty() && return 0

    _try_fetch_bin

    var input = $@.join(" ")
    var opt : [String]
    if $SHTX_CRASH_DUMP {
        $opt.add("--crash-dump")
    }
    var output = "$(call $_SHTX_GO_BIN_PATH $opt - <<< $input)"
    if $? != 0 {
        return 1
    }
    try {
        $MODULE._func($output)()
    } catch e : _SHError {
        return $e.status()
    } catch e : Error {
        $e.show()
        $SHTX_CRASH_DUMP && $__save_crash_dump($input, $output, $e)
        return 255
    }
}

# evaluate bash script (emulate bash source command)
fake_source() {
    $@.empty() && {
        $_error("source", "filename argument required")
        return 2
    }

    _try_fetch_bin

    var input = $@[0]   #FIXME: search path. replace bash completion script
    var opt = ['--type=source']
    if $SHTX_CRASH_DUMP {
        $opt.add("--crash-dump")
    }
    var output = "$(call $_SHTX_GO_BIN_PATH $opt $input)"
    if $? != 0 {
        return 1
    }
    try {
        var func = $MODULE._func($output)()! as ([String]) -> Void
        $func($@)
    } catch e : _SHError {
        return $e.status()
    } catch e : Error {
        $e.show()
        $SHTX_CRASH_DUMP && $__save_crash_dump($input, $output, $e)
        return 255
    }
}


# +++++ entry point for cli +++++

_main() {
    var is_script = $true
    var input : String?
    var index = 0;
    for(; $index < $#; $index++) {
        var arg = $@[$index]
        case $arg {
            '-c' => if $index + 1 < $# {
                $is_script = $false
                $index++
                break
            } else {
                echo 1>&2 need argument: -c
                return 1
            }
            else => break
        }
    }
    if !$input && $index < $# {
        $input = $@[$index]
        $index++
    }
    if $input {
        var input = $input!
        var args = $@.slice($index)
        if $is_script {
            fake_source $input $args
        } else {
            $__shtx_set_argv($args)
            fake_eval $input
        }
        return $?
    } else {
        echo 1>&2 need script
        return 1
    }
}

shctl is-sourced || _main $@
