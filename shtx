#!/usr/bin/env ydsh

# Copyright (C) 2022 Nagisa Sekiguchi
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# +++++ public configuration variables (starts with SHTX_) ++++++

# if true, use current shtx-go binary
var SHTX_DEV_MODE = $false

# +++++ helper functions +++++

var _SHTX_GO_BIN_PATH = ""

_error() : Nothing {
    echo 2>&1 $@
    exit 1
}

_try_fetch_bin() {
    if $SHTX_DEV_MODE || (checkenv SHTX_DEV_MODE) {
        assert command -v go &> /dev/null
        if !(test -x $SCRIPT_DIR/shtx-go) {
            # rebuild
            (cd $SCRIPT_DIR && go build &) .wait()
            test -x $SCRIPT_DIR/shtx-go || _error cannot build shtx-go
        }
        $_SHTX_GO_BIN_PATH = "$SCRIPT_DIR/shtx-go"
    } else {
        shctl set traceonexit
        _error TODO: download released binary
    }
}

# +++++ for shell variable +++++

let __VAR_ATTR_EXPORT = 0x01

typedef _VarEntry(v: String!, a : Int!) {
    var value = $v ?? ""  # if indicate env, value is env name
    var attr = $a ?? 0
}

function hasAttr(attr : Int) : Bool for _VarEntry {
    return ($this.attr and $attr) == $attr
}

# update value, if entry indicates env, update env value
function assign(value : String) : String for _VarEntry {
    if $this.hasAttr($__VAR_ATTR_EXPORT) {
        setenv ${this.value}=$value
    } else {
        $this.value = $value
    }
    return $value
}

# get value. if entry indicates env, get env value
function get() : String! for _VarEntry {
    defer { $? = 0; }
    if $this.hasAttr($__VAR_ATTR_EXPORT) {
        return (checkenv ${this.value}) ? "$(printenv ${this.value})" : new String!()
    } else {
        return $this.value
    }
}

typedef _VarMap() {
    let entries : [String : _VarEntry]
}

let _vars : _VarMap

# get variable entry. if entry is not found, but corresponding env is found, set and return entry
function get(name : String) : _VarEntry! for _VarMap {
    return $this.entries.get($name) ?? {
        if(checkenv "$name") {
            var e = new _VarEntry($name, $__VAR_ATTR_EXPORT)
            $this.entries.put($name, $e)
            return $e
        }
        return new _VarEntry!()
    }
}

function set(name : String, entry : _VarEntry) for _VarMap {
    $this.entries.put($name, $entry)
}

function remove(name : String) : _VarEntry! for _VarMap {
    var e = $this.entries.get($name)
    if $e {
        $this.entries.remove($name)
    }
    return $e
}

# +++++ runtime helper functions (starts with __shtx_) +++++

# for global varibale access
function __shtx_var_get(param : String, op : String!, word : String!) : String {
    assert !$param.empty()

    var e = $_vars.get($param)
    if $e {
        return $e!.get() ?? ""
    }
    return ""
}

__shtx_var_set() {
    var param = $1 :- return 0
    var word = $2

    var e = $_vars.get($param)
    if $e {
        $e!.assign($word)
    } else {
        $_vars.set($param, new _VarEntry($word))
    }
    return 0
}

# for bash export command
__shtx_export() {
    for arg in $@ {
        ($arg.empty() || $arg.startsWith("-")) && continue
        let i = $arg.indexOf('=')
        let name = $i != -1 ? $arg.slice(0, $i) : $arg
        var entry = new _VarEntry($name, $__VAR_ATTR_EXPORT)
        if $i != -1 {
            var value = $arg.slice($i + 1)
            $entry.assign($value)
        }
        $_vars.set($name, $entry)
    }
    return 0
}

# for bash unset command
__shtx_unset() {
    for arg in $@ {
        ($arg.empty() || $arg.startsWith("-")) && continue
        var entry = $_vars.remove($arg)
        !$entry && continue
        if $entry!.hasAttr($__VAR_ATTR_EXPORT) {
            unsetenv $arg
        }
    }
    return 0
}


# dynamically resolve command name
__shtx_dyna_call() {
    $@.empty() && return 0

    var cmd = $@.shift()
    $cmd = case $cmd {
        'export' => '__shtx_export'
        'unset' => '__shtx_unset'
        else => $cmd
    }
    eval "$cmd" $@
}


# +++++ public api functions (starts with fake_) +++++

# evaluate bash script
fake_eval() {
    $@.empty() && return 0

    _try_fetch_bin

    var input = $@.join(" ")
    var output = "$(eval $_SHTX_GO_BIN_PATH - <<< $input)"
    if $? != 0 {
        return 1
    }
    $MODULE._func($output)()
}

shctl is-sourced || fake_eval $@
