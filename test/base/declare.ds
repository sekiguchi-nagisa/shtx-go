# RUN: call $cmd $self

source ../../shtx
source ../common/assert.ds

assert_fake_eval '
fff(){ true; }
declare -F fff
' 'fff'
assert $? == 0

assert_fake_eval '
fff(){ true; }
declare -F fffss fff
' 'fff'
assert $? == 1

assert_fake_eval '
fff(){ true; }
ggg() { local -F; }
declare -F
echo ---
ggg
' 'declare -f fff
declare -f ggg
---'
assert $? == 0

var out = "$(fake_eval '
fff() { true; }
ggg() {
 echo "hello";
}
declare -f fff
"typeset" -f
')"
assert $out == 'fff() { true; }
fff() { true; }
ggg() {
 echo "hello";
}'

$out = "$(fake_eval '
fff() { true; }
ggg() {
 echo "hello";
}
declare -F -f fff
declare -F -f
')"
assert $out == 'fff
declare -f fff
declare -f ggg'


$out = "$(fake_source /dev/stdin << 'EOF'
AAA=34525
IFS=
BASH=/bin/bash
export BBB=2344
fff() {
    local CCC=2345
    local -p
    echo @1
    local -p CCC
    echo @2
    declare -p
}
fff
echo @3
declare -p AAA

EOF
)" 
assert $out == 'CCC="2345"
@1
@2
declare -- CCC="2345"
declare -- IFS=""
declare -- BASH="/bin/bash"
' + "declare -- PPID=\"$PPID\"
declare -- BASHPID
" +
'declare -- AAA="34525"
declare -x BBB="2344"
@3
declare -- AAA="34525"' : $out

## for array
$out = "$(fake_eval '
declare -a AAA BBB= CCC=ss
typeset -p AAA BBB CCC
')"
assert $out == 'declare -a AAA=()
declare -a BBB=([0]="")
declare -a CCC=([0]="ss")'

$out = "$(fake_eval '
AAA=1234
declare -p HOGE AAA 2>&1
')"
assert $out == 'bash: declare: HOGE: not found
declare -- AAA="1234"' : $out
assert $? == 1

$out = "$(fake_eval '
declare ""=1234 2>&1
')"
assert $out == "bash: declare: =1234: not a valid identifier"
assert $? == 1

$out = "$(fake_eval '
declare "&@"=1234 2>&1
')"
assert $out == "bash: declare: &@=1234: not a valid identifier"
assert $? == 1

$out = "$(fake_eval '
typeset "&@"=4567 2>&1
')"
assert $out == "bash: typeset: &@=4567: not a valid identifier"
assert $? == 1

true

# CHECK_RE: ^$
# CHECKERR_RE: ^$
# STATUS: 0